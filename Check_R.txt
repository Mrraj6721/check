#Prg1
library(dplyr)
n<-as.integer(readline("Enter how many records you want to enter:"))
data<-data.frame(Name=character(),Age=integer(),Salary=double(),stringsAsFactors = FALSE)

for(i in 1:n){
  name<-readline("Name:")
  age<-as.integer(readline("Age "))
  salary<-as.numeric(readline("Salary "))
  data<-rbind(data,data.frame(Name=name,Age=age,Salary=salary))
}

data<-data%>%
  filter(Age>25)%>%
  mutate(Salary*0.2)%>%
  rename(Monthly_Salary=Salary)

print(data)




#Prg2
library(readr)      
library(readxl)      
library(writexl)    
 
csv_data <- read_csv(file.choose()) 
xls_data <- read_excel(file.choose()) 
txt_data <- read_delim(file.choose()) 
 
print(head(csv_data)) 
print(head(xls_data)) 
print(head(txt_data)) 
 
write_csv(csv_data, "exported_data.csv") 
cat("\nCSV Data exported \n") 

write_xlsx(xls_data, "exported_data.xlsx") 
cat("Excel Data exported \n") 
 
write_delim(txt_data, "exported_data.txt") 
cat("TXT Data exported")




#Prg3
install.packages("moments") 
library(moments) 

data <- c(12, 15, 20, 21, 18, 30, 25, 22, 23, 27, 18, 20, 22) 

cat("Data:\n") 
print(data) 
 
cat("\nSummary Statistics:\n") 
print(summary(data)) 

mean_val <- mean(data) 
cat("\nMean:", mean_val, "\n") 

median_val <- median(data) 
cat("Median:", median_val, "\n") 

sd_val <- sd(data) 
cat("Standard Deviation:", sd_val, "\n") 

range_val <- range(data) 
cat("Range:", range_val, "\n") 

par(mfrow=c(1,2)) 
hist(data, main="Histogram of Data", col="skyblue", border="black")





#Prg4
install.packages("mice") 
library(mice) 

data <- data.frame( 
  Age = c(25, NA, 30, NA, 28), 
  Income = c(50000, 60000, NA, 58000, NA) 
) 

print(md.pattern(data)) 

cleaned <- na.omit(data) 
 
imputed <- mice(data, m=1, method='pmm', seed=123) 
completed <- complete(imputed) 

print(cleaned) 
print(completed)




#Prg5
data <- data.frame( 
  ID = 1:5, 
  Marks = c(45, 78, 88, 60, 90) 
) 

normalize <- function(x) { 
  return((x - min(x)) / (max(x) - min(x))) 
} 
 
data$Normalized_Marks <- normalize(data$Marks) 

cat("Original and Normalized Data:\n") 
print(data)



